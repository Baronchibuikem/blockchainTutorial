from solcx import compile_standard, install_solc
import json
from web3 import Web3
import os
from dotenv import load_dotenv

load_dotenv()

install_solc("0.6.0")


with open("./SimpleStorage.sol", "r") as file:
    simple_storage_file = file.read()


# Compile our solidity
compiled_sol = compile_standard(
    {
        "language": "Solidity",
        "sources": {"SimpleStorage.sol": {"content": simple_storage_file}},
        "settings": {
            "outputSelection": {
                "*": {"*": ["abi", "metadata", "evm.bytecode", "evm.sourceMap"]}
            }
        },
    },
    solc_version="0.6.0",
)

with open("compiled_code.json", "w") as file:
    json.dump(compiled_sol, file)


# get the bytecode
bytecode = compiled_sol["contracts"]["SimpleStorage.sol"]["SimpleStorage"]["evm"][
    "bytecode"
]["object"]


# get abi
abi = compiled_sol["contracts"]["SimpleStorage.sol"]["SimpleStorage"]["abi"]

if os.getenv("ENVIRONMENT") == "development":
    w3 = Web3(Web3.HTTPProvider("HTTP://127.0.0.1:8545"))
    chain_id = 1337
    my_address = "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"  # this is a dummy public address generated by ganache
    private_key = "0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d"  # this is a dummy private key generated by ganache
else:
    w3 = Web3(Web3.HTTPProvider(os.getenv("RINKEBY_TEST_URL")))
    chain_id = os.getenv("CHAIN_ID")
    my_address = os.getenv("MY_METAMASK_PUBLIC_ADDRESS")
    private_key = os.getenv("MY_METAMASK_PRIVATE_KEY")


# Create the contract in python
SimpleStorage = w3.eth.contract(abi=abi, bytecode=bytecode)

# Get the latest transaction
# Note; A nounce can only be used once for each transaction
nonce = w3.eth.getTransactionCount(my_address)

# Build a transaction
# Sign a transaction
# Send a transaction
transaction = SimpleStorage.constructor().buildTransaction(
    {
        "chainId": w3.eth.chain_id,
        "from": my_address,
        "nonce": nonce,
        "gasPrice": w3.eth.gas_price,
    }
)
signed_transaction = w3.eth.account.sign_transaction(
    transaction, private_key=private_key
)

# send this signed transaction
print("Deploying contract...")
transaction_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)
transaction_receipt = w3.eth.wait_for_transaction_receipt(transaction_hash)
print("Deployed!!!...")


# Working with the contract
simple_storage = w3.eth.contract(address=transaction_receipt.contractAddress, abi=abi)

# Call -> simulate making the call and getting a return value. Doesn't make a state change
# Transact -> Actually make a state change. Makes a state change

# Initial value of favourite_number
print(simple_storage.functions.retrieve().call())
print("Updating Contract...")
store_transaction = simple_storage.functions.store(15).buildTransaction(
    {
        "chainId": w3.eth.chain_id,
        "from": my_address,
        "nonce": nonce + 1,
        "gasPrice": w3.eth.gas_price,
    }
)
signed_store_transaction = signed_transactin = w3.eth.account.sign_transaction(
    store_transaction, private_key=private_key
)
# send this signed store transaction
send_store_transaction_hash = w3.eth.send_raw_transaction(
    signed_store_transaction.rawTransaction
)
send_store_transaction_receipt = w3.eth.wait_for_transaction_receipt(
    send_store_transaction_hash
)
print("Updated Contract!!!...")
print(simple_storage.functions.retrieve().call())
